<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InputManager</name>
    </assembly>
    <members>
        <member name="T:Input">
            <summary>
            Interface into the Input system.
            </summary>
        </member>
        <member name="P:Input.acceleration">
            <summary>
            Last measured linear acceleration of a device in three-dimensional space. (Read Only)
            </summary>
        </member>
        <member name="P:Input.accelerationEventCount">
            <summary>
            Number of acceleration measurements which occurred during last frame.
            </summary>
        </member>
        <member name="P:Input.accelerationEvents">
            <summary>
            Returns list of acceleration measurements which occurred during the last frame. (Read Only) (Allocates temporary variables).
            </summary>
        </member>
        <member name="P:Input.anyKey">
            <summary>
            Is any key or mouse button currently held down? (Read Only)
            </summary>
        </member>
        <member name="P:Input.anyKeyDown">
            <summary>
            Returns true the first frame the user hits any key or mouse button. (Read Only)
            </summary>
        </member>
        <member name="P:Input.backButtonLeavesApp">
            <summary>
            Should Back button quit the application? Only usable on Android, Windows Phone or Windows Tablets.
            </summary>
        </member>
        <member name="P:Input.compass">
            <summary>
            Property for accessing compass (handheld devices only). (Read Only)
            </summary>
        </member>
        <member name="P:Input.compensateSensors">
            <summary>
            This property controls if input sensors should be compensated for screen orientation.
            </summary>
        </member>
        <member name="P:Input.compositionCursorPos">
            <summary>
            The current text input position used by IMEs to open windows.
            </summary>
        </member>
        <member name="P:Input.compositionString">
            <summary>
            The current IME composition string being typed by the user.
            </summary>
        </member>
        <member name="P:Input.deviceOrientation">
            <summary>
            Device physical orientation as reported by OS. (Read Only)
            </summary>
        </member>
        <member name="P:Input.eatKeyPressOnTextFieldFocus">
            <summary>
            Property indicating whether keypresses are eaten by a textinput if it has focus (default true).
            </summary>
        </member>
        <member name="P:Input.gyro">
            <summary>
            Returns default gyroscope.
            </summary>
        </member>
        <member name="P:Input.imeCompositionMode">
            <summary>
            Controls enabling and disabling of IME input composition.
            </summary>
        </member>
        <member name="P:Input.imeIsSelected">
            <summary>
            Does the user have an IME keyboard input source selected?
            </summary>
        </member>
        <member name="P:Input.inputString">
            <summary>
            Returns the keyboard input entered this frame. (Read Only)
            </summary>
        </member>
        <member name="P:Input.isGyroAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Input.location">
            <summary>
            Property for accessing device location (handheld devices only). (Read Only)
            </summary>
        </member>
        <member name="P:Input.mousePosition">
            <summary>
            The current mouse position in pixel coordinates. (Read Only)
            </summary>
        </member>
        <member name="P:Input.mousePresent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Input.mouseScrollDelta">
            <summary>
            The current mouse scroll delta. (Read Only)
            </summary>
        </member>
        <member name="P:Input.multiTouchEnabled">
            <summary>
            Property indicating whether the system handles multiple touches.
            </summary>
        </member>
        <member name="P:Input.simulateMouseWithTouches">
            <summary>
            Enables/Disables mouse simulation with touches. By default this option is enabled.
            </summary>
        </member>
        <member name="P:Input.stylusTouchSupported">
            <summary>
            Returns true when Stylus Touch is supported by a device or platform.
            </summary>
        </member>
        <member name="P:Input.touchCount">
            <summary>
            Number of touches. Guaranteed not to change throughout the frame. (Read Only)
            </summary>
        </member>
        <member name="P:Input.touches">
            <summary>
            Returns list of objects representing status of all touches during last frame. (Read Only) (Allocates temporary variables).
            </summary>
        </member>
        <member name="P:Input.touchPressureSupported">
            <summary>
            Bool value which let's users check if touch pressure is supported.
            </summary>
        </member>
        <member name="P:Input.touchSupported">
            <summary>
            Returns whether the device on which application is currently running supports touch input.
            </summary>
        </member>
        <member name="M:Input.GetAccelerationEvent(System.Int32)">
            <summary>
            Returns specific acceleration measurement which occurred during last frame. (Does not allocate temporary variables).
            </summary>
        </member>
        <member name="M:Input.GetAxis(System.String)">
            <summary>
            Returns the value of the virtual axis identified by axisName.
            </summary>
        </member>
        <member name="M:Input.GetAxis(Axis)">
            <summary>
            Returns the value of the virtual axis identified by Axis enum parameter.
            If controller isn't connected the value returned will be based in Unity input axes and InputManagerRuntime.xml.
            </summary>
        </member>
        <member name="M:Input.GetAxisRaw(System.String)">
            <summary>
            Returns the value of the virtual axis identified by axisName with no smoothing filtering applied.
            </summary>
        </member>
        <member name="M:Input.GetAxisRaw(Axis)">
            <summary>
            Returns the value of the virtual axis identified by Axis enum parameter with no smoothing filtering applied.
            If controller isn't connected the value returned will be based in Unity input axes and InputManagerRuntime.xml.
            </summary>
        </member>
        <member name="M:Input.GetButton(System.String)">
            <summary>
            Returns true while the virtual button identified by buttonName is held down.
            </summary>
        </member>
        <member name="M:Input.GetButton(Button)">
            <summary>
            Returns true while the user holds down the Button identified by the Button enum parameter.
            If controller isn't connected the value returned will be based in Unity input axes and InputManagerRuntime.xml.
            </summary>
        </member>
        <member name="M:Input.GetButtonDown(System.String)">
            <summary>
            Returns true during the frame the user pressed down the virtual button identified by buttonName.
            </summary>
        </member>
        <member name="M:Input.GetButtonDown(Button)">
            <summary>
            Returns true during the frame the user pressed down the Button identified by the Button enum parameter.
            If controller isn't connected the value returned will be based in Unity input axes and InputManagerRuntime.xml.
            </summary>
        </member>
        <member name="M:Input.GetButtonUp(System.String)">
            <summary>
            Returns true the first frame the user releases the virtual button identified by buttonName.
            </summary>
        </member>
        <member name="M:Input.GetButtonUp(Button)">
            <summary>
            Returns true the first frame the user releases the Button identified by the Button enum parameter.
            If controller isn't connected the value returned will be based in Unity input axes and InputManagerRuntime.xml.
            </summary>
        </member>
        <member name="M:Input.GetJoystickNames">
            <summary>
            Returns an array of strings describing the connected joysticks.
            </summary>
        </member>
        <member name="M:Input.GetKey(System.String)">
            <summary>
            Returns true while the user holds down the key identified by name. Think auto fire.
            </summary>
        </member>
        <member name="M:Input.GetKey(UnityEngine.KeyCode)">
            <summary>
            Returns true while the user holds down the key identified by the key KeyCode enum parameter.
            </summary>
        </member>
        <member name="M:Input.GetKeyDown(System.String)">
            <summary>
            Returns true during the frame the user starts pressing down the key identified by name.
            </summary>
        </member>
        <member name="M:Input.GetKeyDown(UnityEngine.KeyCode)">
            <summary>
            Returns true during the frame the user starts pressing down the key identified by the key KeyCode enum parameter.
            </summary>
        </member>
        <member name="M:Input.GetKeyUp(System.String)">
            <summary>
            Returns true during the frame the user releases the key identified by name.
            </summary>
        </member>
        <member name="M:Input.GetKeyUp(UnityEngine.KeyCode)">
            <summary>
            Returns true during the frame the user releases the key identified by the key KeyCode enum parameter.
            </summary>
        </member>
        <member name="M:Input.GetMouseButton(System.Int32)">
            <summary>
            Returns whether the given mouse button is held down.
            </summary>
        </member>
        <member name="M:Input.GetMouseButtonDown(System.Int32)">
            <summary>
            Returns true during the frame the user pressed the given mouse button.
            </summary>
        </member>
        <member name="M:Input.GetMouseButtonUp(System.Int32)">
            <summary>
            Returns true during the frame the user releases the given mouse button.
            </summary>
        </member>
        <member name="M:Input.GetPosition(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Input.GetRotation(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Input.GetTouch(System.Int32)">
            <summary>
            Returns object representing status of a specific touch. (Does not allocate temporary variables).
            </summary>
        </member>
        <member name="M:Input.IsJoystickPreconfigured(System.String)">
            <summary>
            Determine whether a particular joystick model has been preconfigured by Unity. (Linux-only).
            </summary>
            <param name="joystickName">The name of the joystick to check (returned by Input.GetJoystickNames).</param>
            <returns>True if the joystick layout has been preconfigured; false otherwise.</returns>
        </member>
        <member name="M:Input.ResetInputAxes">
            <summary>
            Resets all input. After ResetInputAxes all axes return to 0 and all buttons return to 0 for one frame.
            </summary>
        </member>
        <member name="M:Input.SetVibration(System.Single,System.Single,System.Single)">
            <summary>
            Set vibration if gamepad is conected.
            </summary>
        </member>
    </members>
</doc>
